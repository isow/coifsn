<?php

/*
 * This file has been automatically generated by TDBM.
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the ArticleDao class instead!
 */

namespace coiffuresenegal\Dao;
use \PDO;

/**
 * The ArticleDaoBase class will maintain the persistance of coiffuresenegal\Dao\Bean\ArticleBean class into the article table.
 * 
 */
class DaoCommon {

    protected $host = "localhost";
    protected $dbName = "ibrahimacoifsn";
    protected $dbUser = "root";
    protected $dbPassword = "bibs";
    
    
    public $tableName;
    public $tablePrimaryKey;
    public $tableColumns;

    public function getNewObject($beanClass) {
        return new $beanClass();
    }

    public function query($sql) {
        try {
            $dbh = new PDO('mysql:host=' . $this->host . ';port=3306;dbname=' . $this->dbName, $this->dbUser, $this->dbPassword);

            $stmt = $dbh->prepare($sql);

            $stmt->execute();

            return $stmt;
        } catch (PDOException $e) {
            print "Error!: " . $e->getMessage() . "<br/>";
            return false;
        }
    }

    public function getQueryResults($stmtResult) {
        $results = array();
        while ($rs = $stmtResult->fetch(PDO::FETCH_OBJ)) {
            //echo "output: ".$rs->name."<BR>";
            array_push($results, $rs);
        }
        return $results;
    }

    function camelize($value, $lcfirst = true) {
        $value = preg_replace("/([_-\s]?([a-z0-9]+))/e", "ucwords('\\2')", $value);
        return ($lcfirst ? strtolower($value[0]) : strtoupper($value[0]))
                . substr($value, 1);
    }
    
    
    
    public function getObjects($beanClass, $filterBag = null, $orderbyBag = null, $from = null, $limit = null) {
        $sql = "SELECT " . $this->tablePrimaryKey . " FROM " . $this->tableName;

        if ($filterBag) {
            $cnt = 0;
            foreach ($filterBag as $oneFilter) {
                if ($cnt == 0) {
                    if ($oneFilter->filterMode == 'like')
                        $sql .= " WHERE " . $oneFilter->column . " LIKE " . $oneFilter->value;
                    else
                        $sql .= " WHERE " . $oneFilter->column . " = " . $oneFilter->value;
                } else {
                    if ($oneFilter->filterMode == 'like')
                        $sql .= " AND " . $oneFilter->column . " LIKE " . $oneFilter->value;
                    else
                        $sql .= " AND " . $oneFilter->column . " = " . $oneFilter->value;
                }

                $cnt++;
            }
        }

        if ($orderbyBag)
            $sql .= " ORDER BY " . $orderbyBag;

        if ($limit) {
            if (!$from)
                $from = 0;

            $sql .= " LIMIT " . $limit . " OFFSET " . $from;
        }

        $stmt = $this->query($sql);
        if ($stmt) {
            $resultsArray = $this->getQueryResults($stmt);

            $objectsArray = array();
            foreach ($resultsArray as $oneResult) {
                $primaryKey = $this->tablePrimaryKey;
                $id = $oneResult->$primaryKey;
                
                $oneObject = $this->getObject($beanClass, $id);
                if($oneObject)
                    array_push ($objectsArray, $oneObject);
            }
            
            return $objectsArray;
        }
        
        
        return false;
    }

    public function getObject($beanClass, $id = null, $filterBag = null) {
        $sql = "SELECT * FROM " . $this->tableName;
        if ($id) {
            $sql .= " WHERE " . $this->tablePrimaryKey . " = " . $id;
        } else {
            if ($filterBag) {
                $cnt = 0;
                foreach ($filterBag as $oneFilter) {
                    if ($cnt == 0) {
                        if ($oneFilter->filterMode == 'like')
                            $sql .= " WHERE " . $oneFilter->column . " LIKE " . $oneFilter->value;
                        else
                            $sql .= " WHERE " . $oneFilter->column . " = " . $oneFilter->value;
                    } else {
                        if ($oneFilter->filterMode == 'like')
                            $sql .= " AND " . $oneFilter->column . " LIKE " . $oneFilter->value;
                        else
                            $sql .= " AND " . $oneFilter->column . " = " . $oneFilter->value;
                    }

                    $cnt++;
                }
            }
        }


        $stmt = $this->query($sql);
        if ($stmt) {
            $resultsArray = $this->getQueryResults($stmt);

            foreach ($resultsArray as $oneResult) {
                $beanInstance = new $beanClass();
                foreach ($this->tableColumns as $oneColumn) {
                    $value = $oneResult->$oneColumn;
                    $setter = 'set' . $this->camelize($oneColumn, false);
                    $beanInstance->$setter($value);
                }
                return $beanInstance;
            }
        }

        return false;
    }
    
    
    public function deleteObject($obj) {
        $getter = 'get' . $this->camelize($this->tablePrimaryKey, false);
        $id = $obj->$getter();
        
        $sql = "DELETE FROM " . $this->tableName . " WHERE " . $this->tablePrimaryKey . " = " . $id;
        $stmt = $this->query($sql);
        
        if($stmt)
            return true;
        return false;
    }

}

?>
